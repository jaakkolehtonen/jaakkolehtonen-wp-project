'use strict';

window.EventList = function (window, document, $) {

	var app = {
		upcomingEventsCurrentPage: 1,
		allEventsCurrentPage: 1
	};

	app.cache = function () {
		app.$mainContainer = $('#main');
		app.$upcomingEventsList = $('#event-list__list--upcoming');
		app.$allEventsList = $('#event-list__list--all');
		app.$loadMoreUpcomingEvents = app.$mainContainer.find('#event-list__load-more--upcoming');
		app.$loadMoreAllEvents = app.$mainContainer.find('#event-list__load-more--all');
		app.upcomingEventsMaxNumPages = parseInt(app.$loadMoreUpcomingEvents.data('max-num-pages'));
		app.allEventsMaxNumPages = parseInt(app.$loadMoreAllEvents.data('max-num-pages'));
	};

	app.init = function () {
		app.cache();

		app.$loadMoreUpcomingEvents.on('click', app.loadMoreUpcomingEvents);
		app.$loadMoreAllEvents.on('click', app.loadMoreAllEvents);
	};

	app.loadMoreUpcomingEvents = function (e) {
		if (e.preventDefault) {
			e.preventDefault;
		}

		// Load more with DustPress.js
		dp('PageEvents/QueryUpcomingEvents', {
			args: {
				page: ++app.upcomingEventsCurrentPage
			},
			tidy: true,
			partial: 'event-list',
			success: function success(response) {
				app.$upcomingEventsList.append(response);
				if (app.upcomingEventsCurrentPage === app.upcomingEventsMaxNumPages) {
					app.$loadMoreUpcomingEvents.hide();
				}
			},
			error: function error(_error) {
				console.log(_error);
			}
		});

		return false;
	};

	app.loadMoreAllEvents = function (e) {
		if (e.preventDefault) {
			e.preventDefault;
		}

		// Load more with DustPress.js
		dp('PageEvents/QueryAllEvents', {
			args: {
				page: ++app.allEventsCurrentPage
			},
			tidy: true,
			partial: 'event-list',
			success: function success(response) {
				app.$allEventsList.append(response);
				if (app.allEventsCurrentPage === app.allEventsMaxNumPages) {
					app.$loadMoreAllEvents.hide();
				}
			},
			error: function error(_error2) {
				console.log(_error2);
			}
		});

		return false;
	};

	app.init();

	return app;
}(window, document, jQuery);
'use strict';

window.EventTabs = function (window, document, $) {

	var app = {};

	app.cache = function () {
		app.$mainContainer = $('#main');
		app.$eventTabsLink = app.$mainContainer.find('.event-tabs__link');
		app.$eventTabsContent = app.$mainContainer.find('.event-tabs__content');
	};

	app.init = function () {
		app.cache();

		app.$eventTabsLink.first().addClass('event-tabs__link--active');
		app.$eventTabsContent.first().addClass('event-tabs__content--active');
		app.$eventTabsLink.on('click', app.switchEventsTab);
	};

	app.switchEventsTab = function () {
		var tabId = $(this).attr('data-tab');

		app.$eventTabsLink.removeClass('event-tabs__link--active');
		app.$eventTabsContent.removeClass('event-tabs__content--active');

		$(this).addClass('event-tabs__link--active');
		$('#' + tabId).addClass('event-tabs__content--active');
	};

	app.init();

	return app;
}(window, document, jQuery);
'use strict';

/**
 * Loads more posts in page-archive.php.
 */
window.PostList = function (window, document, $) {

	var app = {
		currentPage: 1
	};

	app.cache = function () {
		app.$mainContainer = $('#main-content');
		app.$postsContainer = $('#post-list-container');
		app.$loadMore = app.$mainContainer.find('#load-more');
		app.maxNumPages = parseInt(app.$loadMore.data('max-num-pages'));
	};

	app.init = function () {
		app.cache();

		app.$loadMore.on('click', app.loadMore);
	};

	app.loadMore = function (e) {
		if (e.preventDefault) {
			e.preventDefault;
		}

		// Load more with DustPress.js
		dp('PageArchive/Query', {
			args: {
				page: ++app.currentPage
			},
			tidy: true,
			partial: 'post-list',
			success: function success(response) {
				app.$postsContainer.append(response);
				if (app.currentPage === app.maxNumPages) {
					app.$loadMore.hide();
				}
			},
			error: function error(_error) {
				console.log(_error);
			}
		});

		return false;
	};

	app.init();

	return app;
}(window, document, jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV2ZW50LWxpc3QuanMiLCJldmVudC10YWJzLmpzIiwicG9zdC1saXN0LmpzIl0sIm5hbWVzIjpbIndpbmRvdyIsIkV2ZW50TGlzdCIsImRvY3VtZW50IiwiJCIsImFwcCIsInVwY29taW5nRXZlbnRzQ3VycmVudFBhZ2UiLCJhbGxFdmVudHNDdXJyZW50UGFnZSIsImNhY2hlIiwiJG1haW5Db250YWluZXIiLCIkdXBjb21pbmdFdmVudHNMaXN0IiwiJGFsbEV2ZW50c0xpc3QiLCIkbG9hZE1vcmVVcGNvbWluZ0V2ZW50cyIsImZpbmQiLCIkbG9hZE1vcmVBbGxFdmVudHMiLCJ1cGNvbWluZ0V2ZW50c01heE51bVBhZ2VzIiwicGFyc2VJbnQiLCJkYXRhIiwiYWxsRXZlbnRzTWF4TnVtUGFnZXMiLCJpbml0Iiwib24iLCJsb2FkTW9yZVVwY29taW5nRXZlbnRzIiwibG9hZE1vcmVBbGxFdmVudHMiLCJlIiwicHJldmVudERlZmF1bHQiLCJkcCIsImFyZ3MiLCJwYWdlIiwidGlkeSIsInBhcnRpYWwiLCJzdWNjZXNzIiwicmVzcG9uc2UiLCJhcHBlbmQiLCJoaWRlIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwialF1ZXJ5IiwiRXZlbnRUYWJzIiwiJGV2ZW50VGFic0xpbmsiLCIkZXZlbnRUYWJzQ29udGVudCIsImZpcnN0IiwiYWRkQ2xhc3MiLCJzd2l0Y2hFdmVudHNUYWIiLCJ0YWJJZCIsImF0dHIiLCJyZW1vdmVDbGFzcyIsIlBvc3RMaXN0IiwiY3VycmVudFBhZ2UiLCIkcG9zdHNDb250YWluZXIiLCIkbG9hZE1vcmUiLCJtYXhOdW1QYWdlcyIsImxvYWRNb3JlIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxPQUFPQyxTQUFQLEdBQXFCLFVBQVVELE1BQVYsRUFBa0JFLFFBQWxCLEVBQTRCQyxDQUE1QixFQUFnQzs7QUFFakQsUUFBSUMsTUFBTTtBQUNOQyxtQ0FBMkIsQ0FEckI7QUFFTkMsOEJBQXNCO0FBRmhCLEtBQVY7O0FBS0FGLFFBQUlHLEtBQUos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YjtBQUNIO0FBZG9CLFNBQXpCOztBQWlCQSxlQUFPLEtBQVA7QUFDSCxLQXhCRDs7QUEwQkE3QixRQUFJYyxJQUFKOztBQUVBLFdBQU9kLEdBQVA7QUFFSCxDQWpEbUIsQ0FpRGpCSixNQWpEaUIsRUFpRFRFLFFBakRTLEVBaURDa0MsTUFqREQsQ0FBcEIiLCJmaWxlIjoiZ2xvYmFsLmpzIiwic291cmNlc0NvbnRlbnQiOlsid2luZG93LkV2ZW50TGlzdCA9ICggZnVuY3Rpb24oIHdpbmRvdywgZG9jdW1lbnQsICQgKSB7XG5cbiAgICB2YXIgYXBwID0ge1xuICAgICAgICB1cGNvbWluZ0V2ZW50c0N1cnJlbnRQYWdlOiAxLFxuICAgICAgICBhbGxFdmVudHNDdXJyZW50UGFnZTogMVxuICAgIH07XG5cbiAgICBhcHAuY2FjaGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgYXBwLiRtYWluQ29udGFpbmVyICAgICAgICAgICAgPSAkKCAnI21haW4nICk7XG4gICAgICAgIGFwcC4kdXBjb21pbmdFdmVudHNMaXN0ICAgICAgID0gJCggJyNldmVudC1saXN0X19saXN0LS11cGNvbWluZycgKTtcbiAgICAgICAgYXBwLiRhbGxFdmVudHNMaXN0ICAgICAgICAgICAgPSAkKCAnI2V2ZW50LWxpc3RfX2xpc3QtLWFsbCcgKTtcbiAgICAgICAgYXBwLiRsb2FkTW9yZVVwY29taW5nRXZlbnRzICAgPSBhcHAuJG1haW5Db250YWluZXIuZmluZCggJyNldmVudC1saXN0X19sb2FkLW1vcmUtLXVwY29taW5nJyApO1xuICAgICAgICBhcHAuJGxvYWRNb3JlQWxsRXZlbnRzICAgICAgICA9IGFwcC4kbWFpbkNvbnRhaW5lci5maW5kKCAnI2V2ZW50LWxpc3RfX2xvYWQtbW9yZS0tYWxsJyApO1xuICAgICAgICBhcHAudXBjb21pbmdFdmVudHNNYXhOdW1QYWdlcyA9IHBhcnNlSW50KCBhcHAuJGxvYWRNb3JlVXBjb21pbmdFdmVudHMuZGF0YSggJ21heC1udW0tcGFnZXMnICkgKTtcbiAgICAgICAgYXBwLmFsbEV2ZW50c01heE51bVBhZ2VzICAgICAgPSBwYXJzZUludCggYXBwLiRsb2FkTW9yZUFsbEV2ZW50cy5kYXRhKCAnbWF4LW51bS1wYWdlcycgKSApO1xuICAgIH07XG5cbiAgICBhcHAuaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBhcHAuY2FjaGUoKTtcblxuICAgICAgICBhcHAuJGxvYWRNb3JlVXBjb21pbmdFdmVudHMub24oICdjbGljaycsIGFwcC5sb2FkTW9yZVVwY29taW5nRXZlbnRzICk7XG4gICAgICAgIGFwcC4kbG9hZE1vcmVBbGxFdmVudHMub24oICdjbGljaycsIGFwcC5sb2FkTW9yZUFsbEV2ZW50cyApO1xuICAgIH07XG5cbiAgICBhcHAubG9hZE1vcmVVcGNvbWluZ0V2ZW50cyA9IGZ1bmN0aW9uKCBlICkge1xuICAgICAgICBpZiAoIGUucHJldmVudERlZmF1bHQgKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTG9hZCBtb3JlIHdpdGggRHVzdFByZXNzLmpzXG4gICAgICAgIGRwKCAnUGFnZUV2ZW50cy9RdWVyeVVwY29taW5nRXZlbnRzJywge1xuICAgICAgICAgICAgYXJnczoge1xuICAgICAgICAgICAgICAgIHBhZ2U6ICsrYXBwLnVwY29taW5nRXZlbnRzQ3VycmVudFBhZ2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aWR5OiB0cnVlLFxuICAgICAgICAgICAgcGFydGlhbDogJ2V2ZW50LWxpc3QnLFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuICAgICAgICAgICAgICAgIGFwcC4kdXBjb21pbmdFdmVudHNMaXN0LmFwcGVuZCggcmVzcG9uc2UgKTtcbiAgICAgICAgICAgICAgICBpZiAoIGFwcC51cGNvbWluZ0V2ZW50c0N1cnJlbnRQYWdlID09PSBhcHAudXBjb21pbmdFdmVudHNNYXhOdW1QYWdlcyApIHtcbiAgICAgICAgICAgICAgICAgICAgYXBwLiRsb2FkTW9yZVVwY29taW5nRXZlbnRzLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKCBlcnJvciApIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyggZXJyb3IgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICBhcHAubG9hZE1vcmVBbGxFdmVudHMgPSBmdW5jdGlvbiggZSApIHtcbiAgICAgICAgaWYgKCBlLnByZXZlbnREZWZhdWx0ICkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIExvYWQgbW9yZSB3aXRoIER1c3RQcmVzcy5qc1xuICAgICAgICBkcCggJ1BhZ2VFdmVudHMvUXVlcnlBbGxFdmVudHMnLCB7XG4gICAgICAgICAgICBhcmdzOiB7XG4gICAgICAgICAgICAgICAgcGFnZTogKythcHAuYWxsRXZlbnRzQ3VycmVudFBhZ2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aWR5OiB0cnVlLFxuICAgICAgICAgICAgcGFydGlhbDogJ2V2ZW50LWxpc3QnLFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuICAgICAgICAgICAgICAgIGFwcC4kYWxsRXZlbnRzTGlzdC5hcHBlbmQoIHJlc3BvbnNlICk7XG4gICAgICAgICAgICAgICAgaWYgKCBhcHAuYWxsRXZlbnRzQ3VycmVudFBhZ2UgPT09IGFwcC5hbGxFdmVudHNNYXhOdW1QYWdlcyApIHtcbiAgICAgICAgICAgICAgICAgICAgYXBwLiRsb2FkTW9yZUFsbEV2ZW50cy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiggZXJyb3IgKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coIGVycm9yICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgYXBwLmluaXQoKTtcblxuICAgIHJldHVybiBhcHA7XG5cbn0oIHdpbmRvdywgZG9jdW1lbnQsIGpRdWVyeSApICk7XG4iLCJ3aW5kb3cuRXZlbnRUYWJzID0gKCBmdW5jdGlvbiggd2luZG93LCBkb2N1bWVudCwgJCApIHtcblxuICAgIHZhciBhcHAgPSB7fTtcblxuICAgIGFwcC5jYWNoZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBhcHAuJG1haW5Db250YWluZXIgICAgPSAkKCAnI21haW4nICk7XG4gICAgICAgIGFwcC4kZXZlbnRUYWJzTGluayAgICA9IGFwcC4kbWFpbkNvbnRhaW5lci5maW5kKCAnLmV2ZW50LXRhYnNfX2xpbmsnICk7XG4gICAgICAgIGFwcC4kZXZlbnRUYWJzQ29udGVudCA9IGFwcC4kbWFpbkNvbnRhaW5lci5maW5kKCAnLmV2ZW50LXRhYnNfX2NvbnRlbnQnICk7XG4gICAgfTtcblxuICAgIGFwcC5pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGFwcC5jYWNoZSgpO1xuXG4gICAgICAgIGFwcC4kZXZlbnRUYWJzTGluay5maXJzdCgpLmFkZENsYXNzKCAnZXZlbnQtdGFic19fbGluay0tYWN0aXZlJyApO1xuICAgICAgICBhcHAuJGV2ZW50VGFic0NvbnRlbnQuZmlyc3QoKS5hZGRDbGFzcyggJ2V2ZW50LXRhYnNfX2NvbnRlbnQtLWFjdGl2ZScgKTtcbiAgICAgICAgYXBwLiRldmVudFRhYnNMaW5rLm9uKCAnY2xpY2snLCBhcHAuc3dpdGNoRXZlbnRzVGFiICk7XG4gICAgfTtcblxuICAgIGFwcC5zd2l0Y2hFdmVudHNUYWIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHRhYklkID0gJCggdGhpcyApLmF0dHIoICdkYXRhLXRhYicgKTtcblxuICAgICAgICBhcHAuJGV2ZW50VGFic0xpbmsgLnJlbW92ZUNsYXNzKCAnZXZlbnQtdGFic19fbGluay0tYWN0aXZlJyApO1xuICAgICAgICBhcHAuJGV2ZW50VGFic0NvbnRlbnQucmVtb3ZlQ2xhc3MoICdldmVudC10YWJzX19jb250ZW50LS1hY3RpdmUnICk7XG5cbiAgICAgICAgJCggdGhpcyApLmFkZENsYXNzKCAnZXZlbnQtdGFic19fbGluay0tYWN0aXZlJyApO1xuICAgICAgICAkKCAnIycgKyB0YWJJZCApLmFkZENsYXNzKCAnZXZlbnQtdGFic19fY29udGVudC0tYWN0aXZlJyApO1xuICAgIH07XG5cbiAgICBhcHAuaW5pdCgpO1xuXG4gICAgcmV0dXJuIGFwcDtcblxufSggd2luZG93LCBkb2N1bWVudCwgalF1ZXJ5ICkgKTtcbiIsIi8qKlxuICogTG9hZHMgbW9yZSBwb3N0cyBpbiBwYWdlLWFyY2hpdmUucGhwLlxuICovXG53aW5kb3cuUG9zdExpc3QgPSAoIGZ1bmN0aW9uKCB3aW5kb3csIGRvY3VtZW50LCAkICkge1xuXG4gICAgdmFyIGFwcCA9IHtcbiAgICAgICAgY3VycmVudFBhZ2U6IDFcbiAgICB9O1xuXG4gICAgYXBwLmNhY2hlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGFwcC4kbWFpbkNvbnRhaW5lciAgPSAkKCAnI21haW4tY29udGVudCcgKTtcbiAgICAgICAgYXBwLiRwb3N0c0NvbnRhaW5lciA9ICQoICcjcG9zdC1saXN0LWNvbnRhaW5lcicgKTtcbiAgICAgICAgYXBwLiRsb2FkTW9yZSAgICAgICA9IGFwcC4kbWFpbkNvbnRhaW5lci5maW5kKCAnI2xvYWQtbW9yZScgKTtcbiAgICAgICAgYXBwLm1heE51bVBhZ2VzICAgICA9IHBhcnNlSW50KCBhcHAuJGxvYWRNb3JlLmRhdGEoICdtYXgtbnVtLXBhZ2VzJyApICk7XG4gICAgfTtcblxuICAgIGFwcC5pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGFwcC5jYWNoZSgpO1xuXG4gICAgICAgIGFwcC4kbG9hZE1vcmUub24oICdjbGljaycsIGFwcC5sb2FkTW9yZSApO1xuICAgIH07XG5cbiAgICBhcHAubG9hZE1vcmUgPSBmdW5jdGlvbiggZSApIHtcbiAgICAgICAgaWYgKCBlLnByZXZlbnREZWZhdWx0ICkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIExvYWQgbW9yZSB3aXRoIER1c3RQcmVzcy5qc1xuICAgICAgICBkcCggJ1BhZ2VBcmNoaXZlL1F1ZXJ5Jywge1xuICAgICAgICAgICAgYXJnczoge1xuICAgICAgICAgICAgICAgIHBhZ2U6ICsrYXBwLmN1cnJlbnRQYWdlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGlkeTogdHJ1ZSxcbiAgICAgICAgICAgIHBhcnRpYWw6ICdwb3N0LWxpc3QnLFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuICAgICAgICAgICAgICAgIGFwcC4kcG9zdHNDb250YWluZXIuYXBwZW5kKCByZXNwb25zZSApO1xuICAgICAgICAgICAgICAgIGlmICggYXBwLmN1cnJlbnRQYWdlID09PSBhcHAubWF4TnVtUGFnZXMgKSB7XG4gICAgICAgICAgICAgICAgICAgIGFwcC4kbG9hZE1vcmUuaGlkZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oIGVycm9yICkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCBlcnJvciApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIGFwcC5pbml0KCk7XG5cbiAgICByZXR1cm4gYXBwO1xuXG59KCB3aW5kb3csIGRvY3VtZW50LCBqUXVlcnkgKSApO1xuIl19
